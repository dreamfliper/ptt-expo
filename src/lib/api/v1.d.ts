/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    /** index */
    get: {
      responses: {
        /** @description index */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/api/account/login": {
    /** Login */
    post: {
      requestBody: {
        content: {
          "*/*": components["schemas"]["AccountLoginParams"];
        };
      };
      responses: {
        /** @description success */
        200: {
          content: {
            "*/*": components["schemas"]["AccessToken"];
          };
        };
      };
    };
  };
  "/api/account/refresh": {
    /** Refresh */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
      };
      requestBody: {
        content: {
          "*/*": unknown;
        };
      };
      responses: {
        /** @description success */
        200: {
          content: {
            "*/*": components["schemas"]["AccessToken"];
          };
        };
      };
    };
  };
  "/api/account/logout": {
    /** Logout */
    post: {
      responses: {
        /** @description redirect to / */
        303: {
          content: {
          };
        };
      };
    };
  };
  "/api/account/register": {
    /** AccountRegister */
    post: {
      requestBody: {
        content: {
          "*/*": components["schemas"]["AccountRegisterParams"];
        };
      };
      responses: {
        /** @description registed */
        200: {
          content: {
            "*/*": components["schemas"]["AccessToken"];
          };
        };
      };
    };
  };
  "/api/account/attemptregister": {
    /** AttemptRegisterUser */
    post: {
      requestBody: {
        content: {
          "*/*": components["schemas"]["account_attemptregister_body"];
        };
      };
      responses: {
        /** @description registed */
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200"];
          };
        };
      };
    };
  };
  "/api/account/existsuser": {
    /** Check Exists User */
    post: {
      requestBody: {
        content: {
          "*/*": components["schemas"]["account_existsuser_body"];
        };
      };
      responses: {
        /** @description registed */
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_1"];
          };
        };
      };
    };
  };
  "/api/articles/popular": {
    /** (mock) 列出熱門文章 */
    get: {
      parameters: {
        query?: {
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
          desc?: components["schemas"]["ParamsDesc"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ArticleList"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/favorites": {
    /** 讀取我的最愛 (板) */
    get: {
      parameters: {
        query?: {
          /**
           * @description 從 folder 的 info 裡拿到的 level_idx
           * @default
           */
          level_idx?: string;
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
          asc?: components["schemas"]["ParamsAsc"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardList"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/favorites/addboard": {
    /** 加板至我的最愛 */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["favorites_addboard_body"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardSummary"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/favorites/addfolder": {
    /** 加目錄至我的最愛 */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["favorites_addfolder_body"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardSummary"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/favorites/addline": {
    /** 加分隔線至我的最愛 */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["favorites_addline_body"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardSummary"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/favorites/delete": {
    /** 刪除我的最愛 */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["favorites_delete_body"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_2"];
          };
        };
      };
    };
  };
  "/api/boards": {
    /** 列出所有板 (可用英文板名搜尋) */
    get: {
      parameters: {
        query?: {
          title?: components["schemas"]["ParamsTitle"];
          keyword?: components["schemas"]["ParamsKeyword"];
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
          asc?: components["schemas"]["ParamsAsc"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardList"];
          };
        };
      };
    };
  };
  "/api/boards/byclass": {
    /** 列出所有板, 以類別優先排序 (可用英文板名搜尋) */
    get: {
      parameters: {
        query?: {
          title?: components["schemas"]["ParamsTitle"];
          keyword?: components["schemas"]["ParamsKeyword"];
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
          asc?: components["schemas"]["ParamsAsc"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardList"];
          };
        };
      };
    };
  };
  "/api/boards/autocomplete": {
    /** 列出所有板 (可用英文板名搜尋) */
    get: {
      parameters: {
        query?: {
          brdname?: components["schemas"]["ParamsBrdname"];
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
          asc?: components["schemas"]["ParamsAsc"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardList"];
          };
        };
      };
    };
  };
  "/api/boards/popular": {
    /** 列出熱門看板 */
    get: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardList"];
          };
        };
      };
    };
  };
  "/api/cls/{clsid}": {
    /** 讀取分類看板的 list */
    get: {
      parameters: {
        query?: {
          start_idx?: components["schemas"]["ParamsStartIdx"];
          sortby?: components["schemas"]["ParamsSortBy"];
          asc?: components["schemas"]["ParamsAsc"];
          limit?: components["schemas"]["ParamsLimit"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description class bid (pttbid) obtained from board-list, root: 1 */
          clsid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardList"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}": {
    /** 拿到本人的所有資訊. */
    get: {
      parameters: {
        query?: {
          fields?: components["schemas"]["ParamsFields"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["UserDetail"];
          };
        };
      };
    };
  };
  "/api/userid": {
    /** 得到 UserID */
    get: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_3"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/summary": {
    /** 拿到 user 的 summary 資訊. */
    get: {
      parameters: {
        query?: {
          fields?: components["schemas"]["ParamsFields"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["UserSummary"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/updatepasswd": {
    /** ChangePasswd */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["ChangePasswdParams"];
        };
      };
      responses: {
        /** @description success */
        200: {
          content: {
            "*/*": components["schemas"]["AccessToken"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/articles": {
    /** 列出使用者的所有文章. */
    get: {
      parameters: {
        query?: {
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
          desc?: components["schemas"]["ParamsDesc"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ArticleList"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/comments": {
    /** 列出使用者的所有 comments. */
    get: {
      parameters: {
        query?: {
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
          desc?: components["schemas"]["ParamsDesc"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ArticleCommentList"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/attemptchangeemail": {
    /** Attempt Change Email */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["AttemptChangeEmailParams"];
        };
      };
      responses: {
        /** @description success */
        200: {
          content: {
            "*/*": components["schemas"]["AttemptChangeEmailResult"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/changeemail": {
    /** Change Email */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["ChangeEmailParams"];
        };
      };
      responses: {
        /** @description success */
        200: {
          content: {
            "*/*": components["schemas"]["ChangeEmailResult"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/attemptsetidemail": {
    /** Attempt Set ID Email */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["AttemptSetIDEmailParams"];
        };
      };
      responses: {
        /** @description success */
        200: {
          content: {
            "*/*": components["schemas"]["AttemptSetIDEmailResult"];
          };
        };
      };
    };
  };
  "/api/user/{user_id}/setidemail": {
    /** Set ID Email */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["SetIDEmailParams"];
        };
      };
      responses: {
        /** @description success */
        200: {
          content: {
            "*/*": components["schemas"]["SetIDEmailResult"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/manuals": {
    /** 讀取板裡的精華區的文章列表 */
    get: {
      parameters: {
        query?: {
          /**
           * @description query string, '' returns root level
           * @default
           */
          level_idx?: string;
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board bid obtained from board-list */
          bid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ManArticleList"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/manual/{aid}": {
    /** 精華區的文章的詳細資訊 */
    get: {
      parameters: {
        query?: {
          fields?: components["schemas"]["ParamsFields"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          bid: string;
          aid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ManArticleDetail"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/manualblocks/{aid}": {
    /** 精華區文章的詳細資訊 (以每 50 行為一個 block) */
    get: {
      parameters: {
        query?: {
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          bid: string;
          aid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ManArticleBlock"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/articles": {
    /** 讀取板裡的文章列表 */
    get: {
      parameters: {
        query?: {
          /**
           * @description query string, '' returns all articles
           * @default
           */
          title?: string;
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
          desc?: components["schemas"]["ParamsDesc"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board bid obtained from board-list */
          bid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ArticleList"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/articles/bottom": {
    /** 讀取置底文章. */
    get: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board bid obtained from board-list */
          bid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ArticleList"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/article/{aid}": {
    /** 文章的詳細資訊 */
    get: {
      parameters: {
        query?: {
          fields?: components["schemas"]["ParamsFields"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          bid: string;
          aid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ArticleDetail"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/articleblocks/{aid}": {
    /** 文章的詳細資訊 (以每 50 行為一個 block) */
    get: {
      parameters: {
        query?: {
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          bid: string;
          aid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ArticleBlock"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/article": {
    /** Create Article */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board id */
          bid: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["CreateArticleParams"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["ArticleSummary"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/deletearticles": {
    /** Delete Articles */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board id */
          bid: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["DeleteArticlesParams"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_4"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/article/{aid}/comments": {
    /** 讀取文章裡的 comments (從最新開始往以前拉資料. (response 時舊的排在前面.)) */
    get: {
      parameters: {
        query?: {
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
          desc?: components["schemas"]["ParamsDesc"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          bid: string;
          aid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["CommentList"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/article/{aid}/comment": {
    /** Create Comment */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board id */
          bid: string;
          /** @description article id */
          aid: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["aid_comment_body"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["Comment"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/article/{aid}/crosspost": {
    /** Cross Post */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board id */
          bid: string;
          /** @description article id */
          aid: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["aid_crosspost_body"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_5"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/article/{aid}/rank": {
    /** Create Rank */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board id */
          bid: string;
          /** @description article-id */
          aid: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["aid_rank_body"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_6"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/article/{aid}/edit": {
    /** Edit Article */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board id */
          bid: string;
          /** @description article id */
          aid: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["aid_edit_body"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_7"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/article/{aid}/replycomments": {
    /** Reply Comments */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board id */
          bid: string;
          /** @description article id */
          aid: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["aid_replycomments_body"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_8"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/article/{aid}/deletecomments": {
    /** Delete Comments */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board id */
          bid: string;
          /** @description article id */
          aid: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["aid_deletecomments_body"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_4"];
          };
        };
      };
    };
  };
  "/api/board/{bid}": {
    /** GetBoardDetail */
    get: {
      parameters: {
        query?: {
          fields?: components["schemas"]["ParamsFields"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board-id */
          bid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardDetail"];
          };
        };
        /** @description null */
        400: {
          content: {
            "*/*": components["schemas"]["BoardDetailFail"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/summary": {
    /** GetBoardSummary */
    get: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          bid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardSummary"];
          };
        };
      };
    };
  };
  "/api/board/{bid}/users": {
    /** 讀取板的上線板友名單 */
    get: {
      parameters: {
        query?: {
          /**
           * @description query string, '' returns all users
           * @default
           */
          name?: string;
          start_idx?: components["schemas"]["ParamsStartIdx"];
          limit?: components["schemas"]["ParamsLimit"];
          desc?: components["schemas"]["ParamsDesc"];
        };
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description board bid obtained from board-list */
          bid: string;
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["UserList"];
          };
        };
      };
    };
  };
  "/api/class/{cls}/board": {
    /** Create Board */
    post: {
      parameters: {
        header?: {
          Authorization?: components["schemas"]["ParamsAuthorization"];
        };
        path: {
          /** @description class number */
          cls: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["CreateBoardParams"];
        };
      };
      responses: {
        /** @description null */
        200: {
          content: {
            "*/*": components["schemas"]["BoardSummary"];
          };
        };
      };
    };
  };
  "/api/version": {
    /** Version */
    get: {
      responses: {
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_9"];
          };
        };
      };
    };
  };
  "/api/uservisitcount": {
    /** Version */
    get: {
      responses: {
        200: {
          content: {
            "*/*": components["schemas"]["inline_response_200_10"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AccessToken: {
      user_id?: string;
      access_token?: string;
      token_type?: string;
      refresh_token?: string;
      /** @description expire time (in unix-time) of access token */
      access_expire?: number;
      /** @description expire time (in unix-time) of refresh token */
      refresh_expire?: number;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    AccountLoginParams: {
      /** @description client-id, use "test_client_id" in the dev env. */
      client_id?: string;
      /** @description client-secret, use "test_client_secret" in the dev env. */
      client_secret?: string;
      /** @description username */
      username?: string;
      password?: string;
    };
    AccountRegisterParams: {
      /** @description client-id, use "test_client_id" in the dev env. */
      client_id?: string;
      /** @description client-secret, use "test_client_secret" in the dev env. */
      client_secret?: string;
      /** @description username */
      username?: string;
      password?: string;
      password_confirm?: string;
      over18?: boolean;
      email?: string;
      nickname?: string;
      realname?: string;
      career?: string;
      address?: string;
    };
    BoardList: {
      list?: components["schemas"]["BoardSummary"][];
      next_idx?: components["schemas"]["RespNextIdx"];
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    BoardSummary: {
      /** @description system-defined board-id */
      bid?: string;
      /** @description user-defined board-name (英文板名) */
      brdname?: string;
      /** @description 中文板名 */
      title?: string;
      /** @description board attribute (https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/brdattr.go) */
      flag?: number;
      /** @description 板的種類 (□, ◎, ...) */
      type?: string;
      /** @description 板的類別 */
      class?: string;
      /** @description 人氣 */
      nuser?: number;
      moderators?: components["schemas"]["user_id"][];
      /** @description 不給看的原因. */
      reason?: string;
      /** @description 文章總數. */
      total?: number;
      /** @description 上次 post 的時間. */
      last_post_time?: number;
      /** @description bord-stat atttribute (folder/line/board) (https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/board_stat.go) */
      stat_attr?: number;
      /** @description folder 的 level-idx */
      level_idx?: string;
      /** @description group-id in pttbbs */
      gid?: number;
      /** @description bid in pttbbs */
      pttbid?: number;
      /** @description index */
      idx?: string;
      /** @description url */
      url?: string;
      /** @description 已讀這個板的最新文章. */
      read?: boolean;
      /** @description 我的最愛. */
      fav?: boolean;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    /**
     * @description bearer [token]
     * @default
     */
    ParamsAuthorization: string;
    /**
     * @description max number of the returned list, requiring <= 200
     * @default 200
     */
    ParamsLimit: string;
    /**
     * @description starting idx, '' if fetch from the beginning.
     * @default
     */
    ParamsStartIdx: string;
    RespNextIdx: string;
    /** @description user_id */
    user_id: string;
    BoardDetail: {
      /** @description system-defined board-id */
      bid?: string;
      /** @description user-defined board-name (英文板名) */
      brdname?: string;
      /** @description 中文板名 */
      title?: string;
      /** @description board attribute (https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/brdattr.go) */
      flag?: number;
      /** @description 板的種類 (□, ◎, ...) */
      type?: string;
      /** @description 板的類別 */
      class?: string;
      /** @description 人氣 */
      nuser?: number;
      moderators?: components["schemas"]["user_id"][];
      /** @description 不給看的原因. */
      reason?: string;
      /** @description 文章總數. */
      total?: number;
      /** @description 上次 post 的時間. */
      last_post_time?: number;
      /** @description bord-stat atttribute (folder/line/board) (https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/board_stat.go) */
      stat_attr?: number;
      /** @description folder 的 level-idx */
      level_idx?: string;
      /** @description group-id in pttbbs */
      gid?: number;
      /** @description bid in pttbbs */
      pttbid?: number;
      /** @description index */
      idx?: string;
      /** @description url */
      url?: string;
      /** @description update 時間 */
      update_time?: number;
      /** @description 最少 login 次數才能投票 */
      vote_limit_logins?: number;
      /** @description 最少 login 次數才能 po 文 */
      post_limit_logins?: number;
      /** @description 至多劣文次數才能投票. */
      vote_limit_bad_post?: number;
      /** @description 至多劣文次數才能 po 文. */
      post_limit_bad_post?: number;
      /** @description 正在舉行的投票的人數 */
      vote?: number;
      /** @description 投票截止時間. */
      vtime?: number;
      /** @description 這個板的權限. */
      level?: number;
      /** @description 最新設定時間. */
      last_set_time?: number;
      /** @description 看板連結的 bid. */
      link_pttbid?: number;
      /** @description post types. */
      post_type?: string[];
      /** @description post types. */
      post_tmpl?: boolean[];
      /** @description 賭盤結束時間 */
      end_gamble?: number;
      /** @description 推文最短間隔時間 */
      fast_recommend_pause?: number;
      /** @description 棋國 */
      chesscountry?: number;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    BoardDetailFail: {
      /** @description system-defined board-id */
      bid?: string;
      moderators?: components["schemas"]["user_id"][];
      /** @description 不給看的原因. */
      reason?: string;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    ArticleSummary: {
      aid?: string;
      bid?: string;
      /** @description is deleted */
      deleted?: boolean;
      filename?: string;
      create_time?: number;
      modified?: number;
      recommend?: number;
      n_comments?: number;
      owner?: string;
      /** @description po 文時間 (月/日) */
      date?: string;
      title?: string;
      money?: number;
      /** @description 文章的種類 (□, R:, 轉) */
      type?: string;
      /** @description 文章的類別 (心情, 討論, 新聞) */
      class?: string;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/file_mode.go */
      mode?: number;
      url?: string;
      read?: boolean;
      idx?: string;
      rank?: number;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/v0.16.2/ptttype/subject_type.go */
      subject_type?: number;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    ArticleList: {
      list?: components["schemas"]["ArticleSummary"][];
      next_idx?: components["schemas"]["RespNextIdx"];
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    ArticleDetail: {
      bid?: string;
      aid?: string;
      /** @description is deleted */
      deleted?: boolean;
      filename?: string;
      create_time?: number;
      modified?: number;
      recommend?: number;
      n_comments?: number;
      owner?: string;
      /** @description po 文時間 (月/日) */
      date?: string;
      title?: string;
      money?: number;
      /** @description 文章的種類 (□, R:, 轉) */
      type?: string;
      /** @description 文章的類別 (心情, 討論, 新聞) */
      class?: string;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/file_mode.go */
      mode?: number;
      url?: string;
      read?: boolean;
      idx?: string;
      rank?: number;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/v0.16.2/ptttype/subject_type.go */
      subject_type?: number;
      /** @description 英文板名 */
      brdname?: string;
      content?: components["schemas"]["Content"];
      prefix?: components["schemas"]["Content"];
      /** @description 作者暱稱 */
      nickname?: string;
      /** @description 作者 ip. */
      ip?: string;
      /** @description ip 的中文呈現, 外國則為國家. */
      host?: string;
      /** @description 發信站. */
      bbs?: string;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    Rune: {
      text?: string;
      color0?: components["schemas"]["Color"];
      color1?: components["schemas"]["Color"];
    };
    Color: {
      /** @description https://github.com/Ptt-official-app/go-openbbsmiddleware/blob/main/types/color.go */
      foreground?: number;
      /** @description https://github.com/Ptt-official-app/go-openbbsmiddleware/blob/main/types/color.go */
      background?: number;
      blink?: boolean;
      highlight?: boolean;
      /** @description 是否是 reset (^[m) */
      reset?: boolean;
    };
    /** @description comments. */
    CommentList: {
      list?: components["schemas"]["Comment"][];
      next_idx?: components["schemas"]["RespNextIdx"];
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    Comment: {
      /** @description system-defined board-id */
      bid?: string;
      aid?: string;
      cid?: string;
      /** @description <a href="https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/comment_type.go">推文種類</a> */
      type?: string;
      /** @description 是在回應哪個 comment. 第 0 層是 '' */
      refid?: string;
      /** @description is deleted */
      deleted?: boolean;
      /** @description 留言時間 */
      create_time?: number;
      /** @description 排序時間 */
      sort_time?: number;
      /** @description 發推文的 user */
      owner?: string;
      content?: components["schemas"]["Content"];
      /** @description from IP */
      ip?: string;
      /** @description from 的描述 (國名) */
      host?: string;
      /** @description idx */
      idx?: string;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    /**
     * @description fields to retrieve, separated by ,(comma)
     * @default
     */
    ParamsFields: string;
    UserDetail: {
      /** @description user_id */
      user_id?: string;
      username?: string;
      nickname?: string;
      realname?: string;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/uflags.go */
      flag?: number;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/perm.go */
      perm?: number;
      login_days?: number;
      posts?: number;
      /** @description first-login in unix-time */
      first_login?: number;
      /** @description last-login in unix-time */
      last_login?: number;
      /** @description from-ip */
      last_ip?: string;
      /** @description last_ip 的網域. */
      last_host?: string;
      money?: number;
      /** @description 在 ptt 上的 email */
      pttemail?: string;
      justify?: string;
      over18?: boolean;
      pager_ui?: number;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/modes.go#L5 */
      pager?: number;
      /** @description 隱身 */
      invisible?: boolean;
      /** @description 可容納站外信數量. */
      exmail?: number;
      career?: string;
      role?: number;
      /** @description last-seen in unix-time */
      last_seen?: number;
      time_set_angel?: number;
      time_play_angel?: number;
      /** @description last-time the user ordered an song (in unix-time). */
      last_song?: number;
      login_view?: number;
      /** @description violation count */
      violation?: number;
      /** @description 五子棋(贏) */
      five_win?: number;
      /** @description 五子棋(輸) */
      five_lose?: number;
      /** @description 五子棋(平) */
      five_tie?: number;
      /** @description 象棋(贏) */
      chc_win?: number;
      /** @description 象棋(輸) */
      chc_lose?: number;
      /** @description 象棋(平) */
      chc_tie?: number;
      /** @description 六子棋(贏) */
      conn6_win?: number;
      /** @description 六子棋(輸) */
      conn6_lose?: number;
      /** @description 六子棋(平) */
      conn6_tie?: number;
      /** @description 圍棋(贏) */
      go_win?: number;
      /** @description 圍棋(輸) */
      go_lose?: number;
      /** @description 圍棋(平) */
      go_tie?: number;
      /** @description 暗棋(贏) */
      dark_win?: number;
      /** @description 暗棋(輸) */
      dark_lose?: number;
      /** @description 暗棋(平) */
      dark_tie?: number;
      /** @description 象棋等級 */
      chess_rank?: number;
      /** @description User-agreement 的版本. */
      ua_version?: number;
      signature?: number;
      /** @description badpost count */
      badpost?: number;
      /** @description 小天使 */
      angel?: string;
      /** @description newest removing badpost in unix-time */
      time_remove_bad_post?: number;
      /** @description newest violating law in unix-time */
      time_violate_law?: number;
      deleted?: boolean;
      update_ts?: number;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/v0.8.2/ptttype/perm2.go */
      perm2?: number;
      /** @description update-time of perm2 */
      update_ts2?: number;
      /** @description 聯絡的 email */
      email?: string;
      /** @description 設定聯絡 email 的時間 */
      email_ts?: number;
      /** @description 是否使用 2FA 機制 */
      twofactor_enabled?: boolean;
      /** @description 設定 2FA 機制的時間 */
      twofactor_enabled_ts?: number;
      /** @description 認證 email */
      idemail?: string;
      /** @description 是否已經設定完成認證 email */
      idemail_set?: boolean;
      /** @description update 認證 email 的時間. */
      idemail_ts?: number;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    Content: components["schemas"]["Rune"][][];
    /**
     * @description ascending (or descending if false)
     * @default true
     */
    ParamsAsc: string;
    /**
     * @description descending (or ascending if false)
     * @default true
     */
    ParamsDesc: string;
    /**
     * @description query title, '' returns all boards
     * @default
     */
    ParamsTitle: string;
    /**
     * @description query keyword, '' returns all boards
     * @default
     */
    ParamsKeyword: string;
    /**
     * @description query keyword, '' returns all boards
     * @default
     */
    ParamsBrdname: string;
    UserList: {
      list?: components["schemas"]["UserListSummary"][];
      next_idx?: components["schemas"]["RespNextIdx"];
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    UserListSummary: {
      username?: string;
      nickname?: string;
      /** @description from-ip */
      last_ip?: string;
      /** @description last_ip 的網域. */
      last_host?: string;
      last_action?: string;
      last_action_time?: number;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/modes.go#L5 */
      pager?: number;
    };
    UserSummary: {
      username?: string;
      nickname?: string;
      login_days?: number;
      post?: number;
      last_action?: string;
      last_action_time?: number;
      /** @description last-login in unix-time */
      last_login?: number;
      /** @description badpost count */
      badpost?: number;
      money?: number;
      /** @description 五子棋(贏) */
      five_win?: number;
      /** @description 五子棋(輸) */
      five_lose?: number;
      /** @description 五子棋(平) */
      five_tie?: number;
      /** @description 象棋(贏) */
      chc_win?: number;
      /** @description 象棋(輸) */
      chc_lose?: number;
      /** @description 象棋(平) */
      chc_tie?: number;
      /** @description 六子棋(贏) */
      conn6_win?: number;
      /** @description 六子棋(輸) */
      conn6_lose?: number;
      /** @description 六子棋(平) */
      conn6_tie?: number;
      /** @description 圍棋(贏) */
      go_win?: number;
      /** @description 圍棋(輸) */
      go_lose?: number;
      /** @description 圍棋(平) */
      go_tie?: number;
      /** @description 暗棋(贏) */
      dark_win?: number;
      /** @description 暗棋(輸) */
      dark_lose?: number;
      /** @description 暗棋(平) */
      dark_tie?: number;
      /** @description 象棋等級 */
      chess_rank?: number;
    };
    ChangePasswdParams: {
      /** @description client-id, use "test_client_id" in the dev env. */
      client_id?: string;
      /** @description client-secret, use "test_client_secret" in the dev env. */
      client_secret?: string;
      orig_password?: string;
      password?: string;
      password_confirm?: string;
    };
    AttemptChangeEmailParams: {
      /** @description client-id, use "test_client_id" in the dev env. */
      client_id?: string;
      /** @description client-secret, use "test_client_secret" in the dev env. */
      client_secret?: string;
      password?: string;
      /** @description email */
      email?: string;
    };
    AttemptChangeEmailResult: {
      user_id?: string;
      email?: string;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    ChangeEmailParams: {
      /** @description client-id, use "test_client_id" in the dev env. */
      client_id?: string;
      /** @description client-secret, use "test_client_secret" in the dev env. */
      client_secret?: string;
      token?: string;
    };
    ChangeEmailResult: {
      email?: string;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    AttemptSetIDEmailParams: {
      /** @description client-id, use "test_client_id" in the dev env. */
      client_id?: string;
      /** @description client-secret, use "test_client_secret" in the dev env. */
      client_secret?: string;
      password?: string;
      /** @description email */
      email?: string;
    };
    AttemptSetIDEmailResult: {
      user_id?: string;
      email?: string;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    SetIDEmailParams: {
      /** @description client-id, use "test_client_id" in the dev env. */
      client_id?: string;
      /** @description client-secret, use "test_client_secret" in the dev env. */
      client_secret?: string;
      token?: string;
    };
    SetIDEmailResult: {
      email?: string;
    };
    CreateBoardParams: {
      brdname?: string;
      class?: string;
      title?: string;
      bms?: string[];
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/brdattr.go */
      brdattr?: number;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/perm.go */
      level?: number;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/ChessCode.go */
      chess_country?: number;
      is_group?: boolean;
    };
    CreateArticleParams: {
      class?: string;
      title?: string;
      content?: components["schemas"]["Content"];
    };
    ArticleCommentList: {
      list?: components["schemas"]["ArticleComment"][];
      next_idx?: components["schemas"]["RespNextIdx"];
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    ArticleComment: {
      /** @description system-defined board-id */
      bid?: string;
      aid?: string;
      cid?: string;
      /** @description is deleted */
      deleted?: boolean;
      create_time?: number;
      modified?: number;
      recommend?: number;
      n_comments?: number;
      owner?: string;
      title?: string;
      money?: number;
      /** @description 文章的類別 (心情, 討論, 新聞) */
      class?: string;
      url?: string;
      read?: boolean;
      idx?: string;
      rank?: number;
      /** @description a: 文章 c: 推文 */
      type?: string;
      /** @description <a href="https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/comment_type.go">推文種類</a> */
      ctype?: number;
      /** @description 推文時間 */
      ctime?: number;
      comment?: components["schemas"]["Content"];
    };
    /**
     * @description <a href="https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/bsort_by.go">sort-by</a>
     * @default 0 (sort-by-name)
     */
    ParamsSortBy: string;
    DeleteCommentParams: {
      /** @description comment id */
      cid?: string;
      /** @description delete reason */
      reason?: string;
    };
    ReplyCommentParams: {
      /** @description comment id */
      cid?: string;
      content?: components["schemas"]["Content"];
    };
    DeleteArticlesParams: {
      /** @description array of to-be-delete article-ids */
      aids?: string[];
    };
    ArticleBlock: {
      content?: components["schemas"]["Content"];
      /** @description is deleted */
      deleted?: boolean;
      create_time?: number;
      modified?: number;
      recommend?: number;
      n_comments?: number;
      rank?: number;
      title?: string;
      money?: number;
      /** @description 文章的類別 (心情, 討論, 新聞) */
      class?: string;
      /** @description https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/file_mode.go */
      mode?: number;
      owner?: string;
      /** @description 作者暱稱 */
      nickname?: string;
      /** @description 作者 ip. */
      ip?: string;
      /** @description ip 的中文呈現, 外國則為國家. */
      host?: string;
      /** @description 發信站. */
      bbs?: string;
      next_idx?: components["schemas"]["RespNextIdx"];
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    ManArticleSummary: {
      aid?: string;
      bid?: string;
      /** @description 是在哪一個 level (使用 aid 表示) */
      level_idx?: string;
      create_time?: number;
      modified?: number;
      title?: string;
      is_dir?: boolean;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    ManArticleList: {
      list?: components["schemas"]["ManArticleSummary"][];
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    ManArticleBlock: {
      content?: components["schemas"]["Content"];
      /** @description is deleted */
      deleted?: boolean;
      create_time?: number;
      modified?: number;
      title?: string;
      next_idx?: components["schemas"]["RespNextIdx"];
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    account_attemptregister_body: {
      client_id?: string;
      client_secret?: string;
      username?: string;
      email?: string;
    };
    inline_response_200: {
      username?: string;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    account_existsuser_body: {
      client_id?: string;
      client_secret?: string;
      username?: string;
    };
    inline_response_200_1: {
      is_exists?: boolean;
    };
    favorites_addboard_body: {
      /**
       * @description 從 folder 的 info 裡拿到的 level_idx
       * @default
       */
      level_idx?: string;
      /** @description board-id */
      bid?: string;
    };
    favorites_addfolder_body: {
      /**
       * @description 從 folder 的 info 裡拿到的 level_idx
       * @default
       */
      level_idx?: string;
      /** @description title */
      title?: string;
    };
    favorites_addline_body: {
      /**
       * @description 從 folder 的 info 裡拿到的 level_idx
       * @default
       */
      level_idx?: string;
    };
    favorites_delete_body: {
      /**
       * @description 從 folder 的 info 裡拿到的 level_idx
       * @default
       */
      level_idx?: string;
      /**
       * @description index.
       * @default
       */
      idx?: string;
    };
    inline_response_200_2: {
      /** @description 是否成功刪除. */
      success?: boolean;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    inline_response_200_3: {
      user_id?: string;
    };
    inline_response_200_4: {
      success?: boolean;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    aid_comment_body: {
      /** @description <a href="https://github.com/Ptt-official-app/go-pttbbs/blob/main/ptttype/comment_type.go">recommend/boo/comment</a> */
      type?: number;
      /** @description string */
      content?: string;
    };
    aid_crosspost_body: {
      /** @description cross post board-id */
      xbid?: string;
    };
    inline_response_200_5: {
      article?: components["schemas"]["ArticleSummary"];
      comment?: components["schemas"]["Comment"];
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    aid_rank_body: {
      rank?: number;
    };
    inline_response_200_6: {
      rank?: number;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    aid_edit_body: {
      class?: string;
      title?: string;
      content?: components["schemas"]["Content"];
    };
    inline_response_200_7: {
      /** @description mtime */
      modified?: number;
      content?: components["schemas"]["Content"];
      prefix?: components["schemas"]["Content"];
      title?: string;
      class?: string;
      /** @description the user-id of the token. */
      tokenuser?: string;
    };
    aid_replycomments_body: {
      list?: components["schemas"]["ReplyCommentParams"][];
    };
    inline_response_200_8: {
      success?: boolean;
    };
    aid_deletecomments_body: {
      list?: components["schemas"]["DeleteCommentParams"][];
    };
    inline_response_200_9: {
      /** @description version */
      version?: string;
      /** @description git-commit */
      commit?: string;
      /** @description go-pttbbs version */
      pttversion?: string;
      /** @description go-pttbbs git-commit */
      pttcommit?: string;
    };
    inline_response_200_10: {
      /** @description user visit count */
      total?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
